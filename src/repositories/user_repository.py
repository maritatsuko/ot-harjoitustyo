import bcrypt
from entities.user import User
from database_connection import get_database_connection


def get_user_by_row(row):
    """Converts a database row into a User object.

    Args:
        row: A sqlite3.Row object representing a row from the database.

    Returns:
        User: A User object created from the database row if the row is not None, otherwise None.
    """
    if not row:
        return None

    return User(row["username"], row["password"])


class UserRepository:
    """Repository class for managing users in the system.
    """

    def __init__(self, connection):
        """Class constructor for the UserRepository.

        Args:
            connection: Database connection object.
        """

        self._connection = connection

    def find_all(self):
        """Fetches all users from the database.

        Returns:
            list: A list of User objects representing all users in the system.
        """

        cursor = self._connection.cursor()
        cursor.execute("select * from users")
        rows = cursor.fetchall()

        return list(map(get_user_by_row, rows))

    def find_by_username(self, username):
        """Fetches a user by their username from the database.

        Args:
            username: The username of the user to search for.

        Returns:
            User: A User object representing the user with the given username, or None if not found.
        """

        cursor = self._connection.cursor()
        cursor.execute(
            "select * from users where username = ?",
            (username,)
        )
        row = cursor.fetchone()

        user = get_user_by_row(row)

        return user

    def create(self, user):
        """Creates a new user in the database with a hashed password.

        Args:
            user(username, password): The user object to be created.

        Returns:
            User: The created User object.
        """

        hashed_password = bcrypt.hashpw(
            user.password.encode('utf-8'), bcrypt.gensalt())

        cursor = self._connection.cursor()

        cursor.execute(
            "insert into users (username, password) values (?, ?)",
            (user.username, hashed_password.decode('utf-8'))
        )

        self._connection.commit()

        return user

    # code generated by copilot starts here
    def verify_password(self, username, password):
        """Verifies the password for a given username.

        Args:
            username: The username of the user.
            password: The plaintext password to verify.

        Returns:
            bool: True if the password is correct, False otherwise.
        """
        user = self.find_by_username(username)
        if not user:
            return False

        is_valid = bcrypt.checkpw(password.encode(
            'utf-8'), user.password.encode('utf-8'))

        return is_valid
    # code generated by copilot ends here

    def delete_all(self):
        """Deletes all users from the database.
        """

        cursor = self._connection.cursor()

        cursor.execute("delete from users")

        self._connection.commit()


user_repository = UserRepository(get_database_connection())
